# bot.py
import os
import logging
from aiohttp import web
from dotenv import load_dotenv

# aiogram
from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import setup_application, SimpleRequestHandler

# OpenRouter (OpenAI-compatible client)
from openai import AsyncOpenAI

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ª–æ–∫–∞–ª—å–Ω–æ .env, –≤ Render –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ)
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")  # https://your-app.onrender.com (–±–µ–∑ /)

# –í–∞–ª–∏–¥–∞—Ü–∏—è
if not BOT_TOKEN or not OPENROUTER_API_KEY or not RENDER_EXTERNAL_URL:
    raise RuntimeError("BOT_TOKEN, OPENROUTER_API_KEY –∏ RENDER_EXTERNAL_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenRouter client (—á–µ—Ä–µ–∑ OpenAI-compatible interface)
# –ï—Å–ª–∏ OpenRouter —Ç—Ä–µ–±—É–µ—Ç –¥—Ä—É–≥–æ–π base_url, –ø–æ–º–µ–Ω—è–π –Ω–∞ —Ç–æ—Ç, —á—Ç–æ –≤ –∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.
client = AsyncOpenAI(base_url="https://openrouter.ai/api/v1", api_key=OPENROUTER_API_KEY)

# Telegram bot –∏ dispatcher
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# –ú–æ–¥–µ–ª—å (–∏–º—è –º–æ–¥–µ–ª–∏ –≤ OpenRouter). –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø—Ä–æ–≤–µ—Ä—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é OpenRouter
MODEL = "deepseek-chat"

# –ó–∞–ø—Ä–æ—Å –∫ OpenRouter (DeepSeek —á–µ—Ä–µ–∑ OpenRouter)
async def get_response_from_openrouter(prompt: str) -> str:
    try:
        resp = await client.chat.completions.create(
            model=MODEL,
            messages=[
                {"role": "system", "content": "You are a helpful English-speaking assistant for language learners."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
        )
        # –í –Ω–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: resp.choices[0].message.content
        return resp.choices[0].message.content.strip()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ OpenRouter:")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_message(message: types.Message):
    text = message.text or ""
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {text}")
    await message.answer("üîç –î—É–º–∞—é...")
    reply = await get_response_from_openrouter(text)
    await message.answer(reply)

# ---- Webhook + aiohttp app ----
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{RENDER_EXTERNAL_URL.rstrip('/')}{WEBHOOK_PATH}"

app = web.Application()

# on_startup / on_shutdown
async def on_startup_app(app: web.Application):
    # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook —É —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown_app(app: web.Application):
    try:
        await bot.delete_webhook()
    except Exception:
        pass
    logger.info("Webhook —É–¥–∞–ª—ë–Ω")

app.on_startup.append(on_startup_app)
app.on_shutdown.append(on_shutdown_app)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º aiogram –≤ aiohttp —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—ã
setup_application(app, dp, bot=bot, handle_in_background=True)
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ webhook-—Å–µ—Ä–≤–µ—Ä–∞...")
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 3000)))
